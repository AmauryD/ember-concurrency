<h2>Using Task Decorators</h2>

<p>
  Since 2.0.0, ember-concurrency uses the <a href="https://github.com/tc39/proposal-decorators" rel="noreferrer noopener">Stage 1 proposed decorator syntax</a>
  for declaring/configuring ember-concurrency tasks on native
  JavaScript/TypeScript classes. This syntax was previously provided by the
  <a href="https://github.com/machty/ember-concurrency-decorators">ember-concurrency-decorators</a>
  addon, but was merged into ember-concurrency. It is still available as a seperate
  addon for use with ember-concurrency 1.x and earlier, or when supporting both
  ember-concurrency v1 and v2 in an addon using decorators.
</p>

<p>
  For more context on decorators and Ember, you can read an excellent briefing on
  decorator syntax in modern Ember here:
  <a href="https://www.pzuraq.com/coming-soon-in-ember-octane-part-1-native-classes/" rel="noreferrer noopener">Coming soon in Ember Octane (Part 1): Native Classes</a>
</p>

<h3 id="available-decorators">Available decorators</h3>

<ul>
  <li>
    <strong><a href="#task"><code>@task</code></a></strong>:
    turns a generator method into a task

    <ul>
      <li><code>@restartableTask</code></li>
      <li><code>@dropTask</code></li>
      <li><code>@keepLatestTask</code></li>
      <li><code>@enqueueTask</code></li>
    </ul>
  </li>

  <li>
    <strong><a href="#task-group"><code>@taskGroup</code></a></strong>:
    creates a task group from a property

    <ul>
      <li><code>@restartableTaskGroup</code></li>
      <li><code>@dropTaskGroup</code></li>
      <li><code>@keepLatestTaskGroup</code></li>
      <li><code>@enqueueTaskGroup</code></li>
    </ul>
  </li>

  <li>
    <strong><a href="#last-value"><code>@lastValue</code></a></strong>:
    alias a property to the result of a task with an optional default value
  </li>
</ul>

<h4 id="task"><code>@task</code></h4>

<CodeSnippet @name="task-decorators-1.js" />

<p>You can also pass further options to the task decorator:</p>

<CodeSnippet @name="task-decorators-2.js" />

<p>You can also use task lifecycle event hooks in your tasks:</p>

<CodeSnippet @name="task-decorators-3.js" />

<p>
  For your convenience, there are extra decorators for all
  <LinkTo @route="docs.task-concurrency">concurrency modifiers</LinkTo>:
</p>

<table>
  <thead>
    <tr>
      <th>Shorthand</th>
      <th>Equivalent</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>@restartableTask</code></td>
      <td><code>@task({ restartable: true })</code></td>
    </tr>
    <tr>
      <td><code>@dropTask</code></td>
      <td><code>@task({ drop: true })</code></td>
    </tr>
    <tr>
      <td><code>@keepLatestTask</code></td>
      <td><code>@task({ keepLatest: true })</code></td>
    </tr>
    <tr>
      <td><code>@enqueueTask</code></td>
      <td><code>@task({ enqueue: true })</code></td>
    </tr>
  </tbody>
</table>

<p>You can still pass further options to these decorators, like:</p>

<CodeSnippet @name="task-decorators-4.js" />

<h5>Encapsulated Tasks</h5>

<blockquote>
  <LinkTo @route="docs.encapsulated-task">Encapsulated Tasks</LinkTo> behave just
  like regular tasks, but with one crucial difference: the value of <code>this</code>
  within the task function points to the currently running TaskInstance, rather
  than the host object that the task lives on (e.g. a Component, Controller, etc).
  This allows for some nice patterns where all of the state produced/mutated by a
  task can be contained (encapsulated) within the Task itself, rather than having
  to live on the host object.
</blockquote>

<CodeSnippet @name="task-decorators-5.js" />

<p>
  Unfortunately, encapsulated tasks have challenges with TypeScript.
  See the <a href="#typescript-support">TypeScript</a> section for more details.
</p>

<h4 id="task-group"><code>@taskGroup</code></h4>

<CodeSnippet @name="task-group-decorators-1.js" />

<p>You can also pass further options to the task group decorator:</p>

<CodeSnippet @name="task-group-decorators-2.js" />

<p>
  As for <code>@task</code>, there are extra decorators for all
  <LinkTo @route="docs.task-concurrency">concurrency modifiers</LinkTo>:
</p>

<table>
  <thead>
    <tr>
      <th>Shorthand</th>
      <th>Equivalent</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>@restartableTaskGroup</code></td>
      <td><code>@taskGroup({ restartable: true })</code></td>
    </tr>
    <tr>
      <td><code>@dropTaskGroup</code></td>
      <td><code>@taskGroup({ drop: true })</code></td>
    </tr>
    <tr>
      <td><code>@keepLatestTaskGroup</code></td>
      <td><code>@taskGroup({ keepLatest: true })</code></td>
    </tr>
    <tr>
      <td><code>@enqueueTaskGroup</code></td>
      <td><code>@taskGroup({ enqueue: true })</code></td>
    </tr>
  </tbody>
</table>

<p>You can still pass further options to these decorators, like:</p>

<CodeSnippet @name="task-group-decorators-3.js" />

<h4 id="last-value"><code>@lastValue</code></h4>

<p>
  This decorator allows you to alias a property to the result of a task.
  You can also provide a default value to use before the task has completed.
</p>

<CodeSnippet @name="last-value-decorator.js" />

<h2 id="typescript-support">TypeScript Support</h2>

<p>
  You can use this package with TypeScript, <em>but</em> unfortunately decorators
  cannot yet change the type signature of the decorated element. This is why you
  may get type errors like:
</p>

<CodeSnippet @name="ts/broken.ts" />

<pre>
TS2339: Property 'perform' does not exist on type '() => IterableIterator&lt;any&gt;'.
</pre>

<p>
  See the <LinkTo @route="docs.typescript">documentation on TypeScript</LinkTo>
  for details and workarounds.
</p>
